# This configuration was generated by `rubocop --auto-gen-config`
# on 2014-04-14 11:36:44 +0900 using RuboCop version 0.18.1.
# The point is for the user to remove these configuration records
# one by one as the offences are removed from the code base.
# Note that changes in the inspected code, or installation of new
# versions of RuboCop, may require this file to be generated again.

# Offence count: 35
Style/AccessorMethodName:
  # getterにget_xxxみたいな名前をつけたらいけないということらしい。無効に。
  Enabled: false

Style/AlignHash:
  # ハッシュのインデントチェック
  Enabled: true

Style/AlignParameters:
  # メソッド呼び出しのインデントチェック
  Enabled: true

Style/AsciiComments:
  # ナンセンスなので無効に。
  Enabled: false

Style/AsciiIdentifiers:
  # 変数をasciiキャラにするということらしい。日本語変数便利なので無効に
  Enabled: false

Lint/AssignmentInCondition:
  # while l = gets みたいなの禁止ということらしい。不便なので無効に
  Enabled: false

Lint/BlockAlignment:
  # ブロックのインデントチェック
  Enabled: true

Metrics/BlockNesting:
  Max: 4

Style/Blocks:
  # 複数行なら do 使えということらしい。別にいいので無効に。
  Enabled: false

Style/BracesAroundHashParameters:
  # 不要なハッシュの中括弧をなくすということらしい。別にいいので無効に。
  Enabled: false

Metrics/ClassLength:
  Max: 200

Style/ClassVars:
  # クラス変数無効に。仕方ないケースはあると思うので無効に。
  Enabled: false

Style/CollectionMethods:
  # injectじゃなくてreduceつかおうとかいう感じ。無効に。
  Enabled: false

Style/ColonMethodCall:
  # Class::method_name みたいな呼び方をしてはいけない。
  Enabled: true

Style/CommentAnnotation:
  # TODOとか書いてたら注意する。面倒なので無効に
  Enabled: false

Lint/ConditionPosition:
  # if
  # x == 0
  #
  # みたいに条件式をifと違う行に書くのは禁止
  Enabled: true

Metrics/CyclomaticComplexity:
  # 循環的複雑度の上限。デフォルト6
  Max: 15

Style/DefWithParentheses:
  # 引数があるならdef行は括弧をつける
  Enabled: false

Style/Documentation:
  # ドキュメント強制。とりあえず無効に
  Enabled: false

Style/DotPosition:
  # . を行末につけるか行頭につけるか。行末につけるので統一。
  EnforcedStyle: 'trailing'
  Enabled: false

Style/EmptyLineBetweenDefs:
  # メソッドの前後に空白行入れるということらしい。一行メソッドなら邪魔なので無効に。
  Enabled: false

Style/EmptyLines:
  # 複数行空白行が続くといけないということらしい。厳しすぎるので無効に。
  Enabled: false

Style/EmptyLinesAroundAccessModifier:
  # private とか publicの前後に空白を挟まないといけないということらしい。微妙なので無効に
  Enabled: false

Style/EmptyLinesAroundBody:
  # メソッドの最初と最後に空白行が入ってたらダメということらしい。別に入ってても可読性保ててれば問題ないので無効に。
  Enabled: false

Style/Encoding:
  # Description: 'Use UTF-8 as the source file encoding.'
  # 例外もあるとおもうので無効に。
  Enabled: false

Style/EndOfLine:
  # Use Unix-style line endings.
  Enabled: true

Style/FormatString:
  # String#% じゃなく、Kernel.sprintfを使おうということらしい。String#%で問題ないので無効に
  Enabled: false

Lint/HandleExceptions:
  # empty rescue blockを禁止。ちょっとつらそうなので無効に
  Enabled: false

Style/DeprecatedHashMethods:
  # has_key?, has_value? に代わって key?, value? を使うように
  Enabled: true

Style/HashSyntax:
  # { a: 1, b: 2} という書き方を強制。慣れてないので無効に
  Enabled: false

Style/IfUnlessModifier:
  # 1個のif ... elsif ... だけでいいところを複数のifに分けて書いたりするのを禁止。
  Enabled: true

Style/IfWithSemicolon:
  # if x; 形式禁止
  Enabled: true

Style/IndentationConsistency:
  # インデントの高さが揃ってるか
  Enabled: true

Style/IndentationWidth:
  # インデントスペース2個チェック。
  Enabled: true

Style/Lambda:
  # ->(x) { x } 形式で書かないといけないということらしい。まあとりあえず問題ないので無効。
  Enabled: false

Style/LeadingCommentSpace:
  # #hoge みたいにスペースのないコメントは禁止。
  # コメントの後にスペースを付けないのは #!/bin/ruby とか rdocの指定のみにする。
  # コードをコメントアウトした時はスペースないので無効に
  Enabled: false

Metrics/LineLength:
  # 行の最大文字数
  Max: 1000

Lint/LiteralInCondition:
  # if文に通知を直接書いたらいけないという話。確かに効果はありそうだが...
  Enabled: false

Style/MethodCallParentheses:
  # メソッド呼び出しにカッコつけたらいけないらしい。どうでもいいので無効に
  Enabled: false

Metrics/MethodLength:
  # メソッドの最大行数。デフォルトは10行以下で、さすがにそれはしんどいと思う。
  # 50行というのもケースによると思うけど... とりあえず50で。
  Max: 50

Style/MethodName:
  # def body; '' end とか def +(other) なら、引数はotherという名前でないといけないとかいうことらしい。
  # 別にいいと思うので無効に。
  Enabled: false

Style/MultilineBlockChain:
  # a.each {
  # }.select(&:hoge?)
  # みたいにしたらいけないということらしい。よく使うので無効に。
  Enabled: false

Style/MultilineTernaryOperator:
  # a ? b
  #   : c
  # みたいに書いたらいけないということらしい。別にいいと思うので無効に
  Enabled: false

Style/NestedTernaryOperator:
  Enabled: false # a ? b : c ? d : e みたいにしたらいけないということらしい。よく書く構文なので無効に。

Style/NilComparison:
  Enabled: false # x == nil じゃなくて x.nil? 使いましょうという話。そんなに強制しなくてもいいと思うので無効。

Style/NumericLiterals:
  MinDigits: 7 # 12345 じゃなくて 12_345 みたいに書きましょうという話。7桁までは許可するように。

Style/ParenthesesAroundCondition:
  Enabled: false # %Q, %qを使わないようにということらしい。使ってもいいと思うので無効に

Style/PerlBackrefs:
  Enabled: false # 正規表現で $1, $2 とか使わないようにということらしい。使ってるので無効に

Style/PredicateName:
  Enabled: true # predicateメソッドの名前は hoge? にする

Style/RaiseArgs:
  Enabled: false # 例外の引数がおかしくないかチェック。チェックの必要ない

Style/RedundantReturn:
  Enabled: false # returnを明示的に書くの禁止。とくに問題無いと思うので無効に

Style/RedundantSelf:
  Enabled: false # self.hoge を禁止。selfは付けておいたほうがいいと思うので無効に

Style/RescueModifier:
  Enabled: false  # hoge rescue nil みたいなの禁止する。この構文使うので無効に

Style/Semicolon:
  Enabled: true # ; セミコロン使わない

Lint/ShadowingOuterLocalVariable:
  Enabled: true

Style/SignalException:
  #Description: 'Checks for proper usage of fail and raise.'
  Enabled: true # へんな例外の使い方してないかチェック

Style/SingleLineBlockParams:
  Enabled: true # x.map(a) {|b, c| action(b, c)} みたいなのの表記が崩れてれば報告する

Style/SpaceAfterColon:
  Enabled: true # : の後ろにスペース入れないといけない

Style/SpaceAfterComma:
  Enabled: true # , の後ろにスペース入れないといけない

Style/SpaceAfterControlKeyword:
  Enabled: true # if (a), unless (a) みたいにキーワードの後ろにスペース入れる。

Style/SpaceAfterNot:
  Enabled: true # ! something みたいに!の後にスペース入れたらダメ。

Style/SpaceAroundEqualsInParameterDefault:
  Enabled: false # デフォルト引数を, a = 0)みたいに=の周りにスペース入れるか。入れないので無効に

Style/SpaceAroundOperators:
  Enabled: false # 1+2 とか a=b とかにスペースが入るかどうか。例外もあるし無効に。

Style/SpaceInsideBrackets:
  #Description: 'No spaces after [ or before ].'
  Enabled: true

Style/SpaceInsideHashLiteralBraces:
  #Description: "Use spaces inside hash literal braces - or don't."
  Enabled: true

Style/SpaceInsideParens:
  #Description: 'No spaces after ( or before ).'
  Enabled: true

Style/StringLiterals:
  Enabled: false # " ' は厳密に使い分ける必要ない。無駄な修正が発生する

Style/Tab:
  #Description: 'No hard tabs.'
  Enabled: true

Style/TrailingBlankLines:
  Enabled: false # ファイル末にに空白行適当にあっても問題ない

Style/TrailingComma:
  #Description: 'Checks for trailing comma in parameter lists and literals.'
  Enabled: false # 別に行末にコンマあっても問題ない

Style/TrailingWhitespace:
  Enabled: false

# Offence count: 3
Style/UnlessElse:
  #Description: >-
  #  Never use unless with else. Rewrite these with the positive
  #  case first.
  Enabled: false

Style/VariableName:
  Enabled: false

Style/WhenThen:
  #Description: 'Use when x then ... for one-line cases.'
  Enabled: false

Style/WordArray:
  #Description: 'Use %w or %W for arrays of words.'
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

Metrics/ParameterLists:
  Max: 10

Style/SpaceBeforeBlockBraces:
  Enabled: true

Style/SpaceInsideBlockBraces:
  Enabled: false

Style/DoubleNegation:
  Enabled: false

Style/NegatedIf:
  #Description: >-
  #    Favor unless over if for negative conditions
  #    (or control flow or).
  Enabled: false # 別にif !xxx でも見れんことはないので無視

Style/SingleLineMethods:
  #Description: 'Avoid single-line methods.'
  Enabled: false # シングルラインメソッド定義したいこともある

Style/TrivialAccessors:
  #Description: 'Prefer attr_* methods to trivial readers/writers.'
  Enabled: false # rubocopが違う変数名へのアクセッサでも警告出してうっとおしいので

Style/Next:
  #Description: 'Use `next` to skip iteration instead of a condition at the end.'
  Enabled: false # 別にいいと思うので無効に

Style/CharacterLiteral:
  # ?a みたいなリテラルを使うなということらしい。問題ないので無効に
  Enabled: false

Style/IfUnlessModifier:
  # 1行しか実行行がないなら後置ifにしろということらしい。
  # 前置にしたほうが見やすいケースもあるので無効に
  Enabled: false

Style/EachWithObject:
  # Description: 'Prefer `each_with_object` over `inject` or `reduce`.'
  # べつにinjectでもいいので無効に。
  Enabled: false

Style/GuardClause:
  # ガード節使えるなら使えということらしい。ケースによっては微妙なので無効に
  Enabled: false
